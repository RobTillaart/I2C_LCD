#pragma once
//
//    FILE: I2C_LCD_spectrum_chars.h
//  AUTHOR: Rob.Tillaart
// VERSION: see library.properties
// PURPOSE: Arduino library for I2C_LCD
//     URL: https://github.com/RobTillaart/I2C_LCD
//          https://maxpromer.github.io/LCD-Character-Creator/
//
//  Not all spectra are tested with examples.
//  Feedback / additions are welcome.


////////////////////////////////////
//
//  COLUMNS
//
//  WIDE == 5 pixel wide
uint8_t columnWide[8][8] =
{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F },
  { 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F },
  { 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },
  { 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },
  { 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },
  { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F }
};

//  MEDIUM == 3 pixel wide
uint8_t columnMedium[8][8] =
{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0E },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x0E },
  { 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x0E, 0x0E },
  { 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E },
  { 0x00, 0x00, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E },
  { 0x00, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E },
  { 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E }
};

//  SMALL == 1 pixel wide
uint8_t columnSmall[8][8] =
{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04 },
  { 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04 },
  { 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04 },
  { 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },
  { 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 },
  { 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04 }
};

//  HOLLOW == 5 pixel wide, hollow inside
uint8_t columnHollow[8][8] =
{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x11 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x11, 0x11 },
  { 0x00, 0x00, 0x00, 0x00, 0x1F, 0x11, 0x11, 0x11 },
  { 0x00, 0x00, 0x00, 0x1F, 0x11, 0x11, 0x11, 0x11 },
  { 0x00, 0x00, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x11 },
  { 0x00, 0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 },
  { 0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 }
};


//  LINE == only the top line, need SPACE char for the supporting column.
uint8_t columnLine[8][8] =
{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};



////////////////////////////////////
//
//  ROWS LEFT TO RIGHT
//
//  for the row / horizontal bar we only need 4 characters.
//  note the full filled block => lcd.special(255);
//
//  8 pixel high
uint8_t rowLeftToRight[4][8] =
{
  { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 },
  { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18 },
  { 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C },
  { 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E }
};

//  WIDE == 6 pixel high
uint8_t rowL2RWide[4][8] =
{
  { 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00 },
  { 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 },
  { 0x00, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x00 },
  { 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x00 }
};

//  MEDIUM == 4 pixel high
uint8_t rowL2RMedium[4][8] =
{
  { 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00 },
  { 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00 },
  { 0x00, 0x00, 0x1C, 0x1C, 0x1C, 0x1C, 0x00, 0x00 },
  { 0x00, 0x00, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 0x00 }
};

//  SMALL == 2 pixel high
uint8_t rowL2RSmall[4][8] =
{
  { 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x1E, 0x1E, 0x00, 0x00, 0x00 }
};


////////////////////////////////////
//
//  ROWS RIGHT TO LEFT
//
//  8 pixel high
uint8_t rowRightToLeft[4][8] =
{
 { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
 { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 },
 { 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07 },
 { 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F }
};

//  WIDE == 6 pixel high
uint8_t rowR2LWide[4][8] =
{
 { 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00 },
 { 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00 },
 { 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00 },
 { 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00 }
};

//  MEDIUM == 4 pixel high
uint8_t rowR2LMedium[4][8] =
{
 { 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00 },
 { 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00 },
 { 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00 },
 { 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00 }
};

//  SMALL == 2 pixel high
uint8_t rowR2LSmall[4][8] =
{
 { 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00 },
 { 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00 },
 { 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00 },
 { 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00 }
};


////////////////////////////////////
//
//  EXPERIMENTAL
//
//  special L2R spectrum with underscores
//  set in the spectrumRow space to underscore
uint8_t rowLeftToRight_us[4][8] =
{
  { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x00 },
  { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x00 },
  { 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1F, 0x00 },
  { 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x00 }
};


//  -- END OF FILE --

